{
    "swagger": "2.0",
    "info": {
        "title": "Donkeylift API",
        "description": "A data access layer to SQL databases (sqlite).",
        "version": "1.0.0"
    },
    "host": "$DONKEYLIFT_API",
    "schemes": [
        "http"
    ],
    "basePath": "/",
    "produces": [
        "application/json"
    ],
    "paths": {
        "/": {
            "get": {
                "summary": "List Accounts",
                "description": "",
                "tags": [
                    "account"
                ],
                "responses": {
                    "200": {
                        "description": "returns all available accounts.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "url": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/{account}": {
            "get": {
                "summary": "Get Account",
                "description": "Get account properties including list of databases.",
                "tags": [
                    "account"
                ],
                "parameters": [
                    {
                        "name": "account",
                        "in": "path",
                        "description": "account to fetch",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "returns account object",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/{account}/{database}": {
            "get": {
                "summary": "Get Database Schema",
                "description": "Get database schema definition and a few other properties.",
                "operationId": "getSchema",
                "parameters": [
                    {
                        "name": "account",
                        "in": "path",
                        "description": "account that holds database",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "database",
                        "in": "path",
                        "description": "database to fetch",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "database"
                ],
                "responses": {
                    "200": {
                        "description": "A database object",
                        "schema": {
                            "$ref": "#/definitions/Database"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/{account}/{database}/{table}.rows": {
            "get": {
                "summary": "Get row data",
                "operationId": "getRows",
                "description": "Get rows from a table or a set of related tables. Supports data selection, projection, sorting and paging. Selection - filtering out rows based on specific field values- and projection - returning only specific fields from rows - will automatically join tables through foreign keys to obtain the result rows when necessary. The query syntax is largely borrowed from OData.\n#### Example\n\n\n    http://api.donkeylift.com/demo/sandwiches/orders.rows?$filter=order_date btwn '2015-01-01','2015-03-31'%09sandwiches.price ge 8.00&$select=order_date,total_amount,customers.name,sandwiches.name,sandwiches.price  \n\n\n\nGet row data from sandwiches database. Select premium sandwich orders from 1st quarter 2015. Return customer name, order date, total order amount, sandwich name and price.\n### Selection \nSelection filters the result row set based on values in specific data columns (fields). Fields in filter condition are by default bound to the table in url path, but may also refer to fields in related tables. \n\nSelection is specificed by a set of filters. Filters are combined using AND logic, meaning rows must fulfill all filters to be returned in the result set. \n\nIndividual filter definition options follow.\n#### Syntax\n    [table].field {op} values\n\nEach filter has three parts: the table field it acts upon, the operator to apply to that field, and the values that parametrize the filter operation. \n\nA filter field should be specified as 'table.field' to refer to a related table different from the url path table. If table prefix is omitted, the field should belong to the url path table.   \nOnly literals are supported as filter values. \n#### Operators\n##### eq / ne / gt / ge / lt / le\nEqual, Not equal, Greater than, Greater or equal than, Lesser than and Lesser or equal than operators. Operation parameter must be a single value.\n\n    Name eq 'Fred'\n    Product.Price le 100\n##### in / ex\nIn and Ex (not in) operators. Supports multiple values.\n\n    Country in 'Belgium','Netherlands','Luxemburg'\n    Product.Accessory ex 'Headset','Microphone'\n    \n##### btwn\nBetween operator. A convenience operator equivalent to 'greater or equal than and lesser or equal than'. Requires two values.\n\n    Price btwn 0.01,9.99\n    Name btwn 'A','D'\n\n##### search\nSearch operator. Searches for words starting with 'value' in individual table fields or full rows. To query full rows use table.* as first parameter.\n\n    Description search 'Paris'\n    Product.* search 'France'\n\n### Row Projection\nProjection replaces data columns of result rows by values corresponding to a set of given fields. Fields are by default bound to the table in url path, but may also refer to fields in related tables. \n\nFields should be specified as 'table.field' to refer to a related table different from the url path table. If table prefix is omitted, the field should belong to the url path table.   \n\n    \n",
                "parameters": [
                    {
                        "name": "account",
                        "in": "path",
                        "description": "database account",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "database",
                        "in": "path",
                        "description": "table database",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "table",
                        "in": "path",
                        "description": "table with data rows",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "array of row filters.",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "tsv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "$select",
                        "in": "query",
                        "description": "array of table fields.",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "array of ordering clauses.",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "skip rows from result set.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "number of rows to be returned.",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "tags": [
                    "table"
                ],
                "responses": {
                    "200": {
                        "description": "A row result set"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Add rows",
                "operationId": "addRows",
                "description": "Add rows to a table\n",
                "parameters": [
                    {
                        "name": "account",
                        "in": "path",
                        "description": "database account",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "database",
                        "in": "path",
                        "description": "table database",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "table",
                        "in": "path",
                        "description": "destination table of new rows",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A row result set"
                    }
                }
            }
        }
    },
    "definitions": {
        "Account": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "databases": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "url": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "Database": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "tables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Table"
                    }
                },
                "join_trees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/JoinTree"
                    }
                }
            }
        },
        "Table": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "row_count": {
                    "type": "integer"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Field"
                    }
                }
            }
        },
        "Field": {
            "type": "object"
        },
        "JoinTree": {
            "type": "object",
            "description": "A join tree represents a possible subset of  existing joins between tables. It is a graph tree with tables as nodes and edges that must refer to existing joins beween tables through one or more foreign keys. <br>If the table graph resulting from connecting all tables by their fk's has no cycles, there is no reason to have more than one join tree. But if any two tables can be joined together through different sets of keys, refering to an individual join tree disambiguates how to query data rows filtered by related tables.",
            "properties": {
                "tables": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "description": "table name"
                    }
                },
                "joins": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "v": {
                                "type": "string",
                                "description": "table name"
                            },
                            "w": {
                                "type": "string",
                                "description": "table name"
                            }
                        }
                    }
                }
            }
        },
        "Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                },
                "fields": {
                    "type": "string"
                }
            }
        }
    }
}